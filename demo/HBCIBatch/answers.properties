
# Intern arbeitet HBCI4Java mit einem Callback-Mechanismus, um benötigte Daten
# vom Anwender abzufragen. Um diesen Callback-Mechanismus zu automatisieren,
# müssen in dieser Datei die "Antworten" für alle Callbacks enthalten sein, die
# bei der Ausführung von HBCIBatch auftreten können.
#
# Eine Liste aller Callbacks ist in der API-Dok. zu Interface
# org.kapott.hbci.callback.HBCICallback zu finden. 


# Wird nur beim PIN/TAN-Verfahren benoetigt, wenn der Server
# auch das iTAN-Verfahren unterstützt. Dann ist mit diesem Parameter
# die ID des zu verwendenden Sicherheitsverfahrens anzugeben.
# Hier macht momentan nur "999" ("normales PIN/TAN-Verfahren") Sinn, 
# weil sich das iTAN-Verfahren im Moment noch nicht mit HBCIBatch
# automatisieren laesst.
# Callback-Reason: NEED_PT_SECMECH
secmech=999


# wird nur bei Verwendung von SIZRDHFile-Passports benötigt
# und legt fest, welcher Eintrag aus der Schlüssel-Datei
# verwendet werden soll. 
# Callback-Reason: NEED_SIZENTRY_SELECT
# sizentry=1


# Passwort fuer das Laden der Passport-Datei. Falls eine
# neue Passport-Datei erzeugt wird, wird dieses Passwort
# auch zum Speichern der Passport-Datei verwendet.
# Callback-Reason: NEED_PASSPHRASE_LOAD und NEED_PASSPHRASE_SAVE
passphrase=secret


# PIN fuer DDV-Chipkarte; wird nur benoetigt, wenn
# ein DDV-Passport mit client.passport.DDV.softpin=1
# verwendet wird
# Callback-Reason: NEED_SOFTPIN
# softpin=12345


# PIN fuer das PIN/TAN-Verfahren
# Callback-Reason: NEED_PT_PIN
pin=12345

# VOP Result für das Verification of Payee Verfahren
# Callback-Reason: HAVE_VOP_RESULT
# Falls die verification of payee fehlschlägt, wird die Ausführung abgebrochen
# Alternativ kann der Auftrag mit vopresult=true trotzdem angewiesen werden.
vopresult=false

# TANs für das PIN/TAN-Verfahren; wird nur benötigt,
# falls tatsächlich HBCI-PIN/TAN gemacht wird und
# ein TAN-pflichtiger GV ausgeführt werden soll.
# Im Moment wird hier die Angabe *einer* TAN unterstützt.#
# Callback-Reason: NEED_PT_TAN
# tans=1111111111

# TANs für das PIN/TAN-Verfahren; wird nur benötigt,
# falls tatsächlich HBCI-PIN/TAN gemacht wird und
# ein TAN-pflichtiger GV ausgeführt werden soll.
# Die Tan kann alternativ asynchron in eine seperate Datei geschrieben werden.
# HBCIBatch wartet 60 Sekunden auf die Bereitstellung einer TAN.
# Die Datei kann vorab leer erzeugt werden und wird verarbeitet,
# sobald die erste Zeile einen nicht leeren String enthält.
# Callback-Reason: NEED_PT_TAN
# tanfile=/pfad/zur/datei

# Soll HBCIBatch für die vollautomatische Ausführung *mehrerer* TAN-pflichtiger 
# GVs verwendet werden, so ist folgendermaßen vorzugehen:
#   - Erzeugen einer anwers.properties, die u.a. die Zeile "tans=11111111"
#     enthält.
#   - Erzeugen einer Job-Definitions-Datei, die *einen* TAN-pflichtigen
#     GV enthält.
#   - Ausführen von HBCIBatch
#   - Auswerten der Ergebnisdaten
#   - Erzeugen einer neuen answers.properties mit der Zeile "tans=22222222"
#   - Erzeugen einer neuen Job-Definitions-Datei, die den nächsten TAN-
#     pflichtigen GV enthält
#   - Ausführen von HBCIBatch
#   - ...
#
# Das Erzeugen der answers.properties kann dabei natürlich ebenfalls 
# automatisiert werden, um z.B. pro Durchgang eine TAN aus einer TAN-Liste in
# die Datei zu schreiben. Analoges gilt für die automatische Erzeugung der
# Job-Definitions-Dateien. 
#
# Alternativ dazu kann man natürlich mehrere Sätze von Dateien erzeugen
# (answers1.properties (mit tans=11111111) und jobs1.batch (mit GV #1);
#  answers2.properties (mit tans=22222222) und jobs2.batch (mit GV #2)
#  usw.) und anschließend HBCIBatch mehrmals mit jeweils unterschiedlichen
# Dateinamen aufrufen.


# Die folgenden Parameter werden nur benoetigt, wenn das angegebene 
# Passport-File (in hbci4java.properties - Parameter 
# "client.passport.*.filename") noch nicht existiert. In diesem
# Fall wird von HBCI4Java ein neues Passport erzeugt, mit den hier
# angegebenen Verbindungsdaten.
# 
# Falls bereits ein Passport-File existiert, hat die Angabe dieser
# Daten *keine* Auswirkung, d.h. die bereits im Passport gespeicherten
# Daten werden damit *nicht* aktualisiert (zum Bearbeiten von Passport-Daten
# kann u.a. der HBCI4Java Passport Editor verwendet werden).
# 
# Generell ist es nicht empfehlenswert, ein Passport auf diesem Wege 
# zu erzeugen (besser vorher manuell, z.B. mit InitAndTest oder mit
# dem HBCI4Java Passport Editor).
#
# Callback-Reasons:
#   NEED_COUNTRY
#   NEED_BLZ
#   NEED_HOST
#   NEED_PORT
#   NEED_FILTER
#   NEED_USERID
#   NEED_CUSTOMERID

# country=DE
# blz=80007777
# host=www.hora-obscura.de/pintan/PinTanServlet
# port=443
# filter=Base64
# userid=kleiner
# customerid=kleiner

